cmake_minimum_required(VERSION 3.3)
project(CoeusCore VERSION 1.0.0)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(INCLUDE_FILES
	ActivationFunctionFactory.h
	Adadelta.h
	AdadeltaRule.h
	Adagrad.h
	AdagradRule.h
	ADAM.h
	AdaMax.h
	AdaMaxRule.h
	ADAMRule.h
	AMSGrad.h
	AMSGradRule.h
	AnnealingScheduler.h
	AutoDifferentiator.h
	BackProph.h
	BackPropRule.h
	base64.h
	BaseLayer.h
	BinaryActivation.h
	Coeus.h
	ConvLayer.h
	ConvOperator.h
	CoreLayer.h
	CrossEntropyCost.h
	Encoder.h
	ExponentialActivation.h
	ExponentialCost.h
	ExponentialDecay.h
	GaussianActivation.h
	GenKLDivergence.h
	Gradient.h
	GradientAccumulator.h
	GradientAlgorithm.h
	GRULayer.h
	HellingerDistance.h
	IActivationFunction.h
	IBatchModule.h
	ICostFunction.h
	IDGen.h
	IGate.h
	ILearningRateModule.h
	IOUtils.h
	ItakuraSaitoDistance.h
	IUpdateRule.h
	KLDivergence.h
	LinearActivation.h
	Logger.h
	LSTMLayer.h
	Metrics.h
	Nadam.h
	NadamRule.h
	NaturalGradient.h
	NetworkGradient.h
	NeuralNetwork.h
	NeuronOperator.h
	OpenMPBatchModule.h
	Param.h
	ParamModel.h
	ParamModelStorage.h
	PoolingLayer.h
	PowerSign.h
	PowerSignRule.h
	QuadraticCost.h
	RecurrentLayer.h
	ReluActivation.h
	ReplayBuffer.h
	RMSProp.h
	RMSPropRule.h
	RuleFactory.h
	SigmoidActivation.h
	SingleBatchModule.h
	SoftmaxActivation.h
	SoftplusActivation.h
	TanhActivation.h
	WarmStartup.h
	json.hpp
	)

set(SOURCE_FILES 
	ActivationFunctionFactory.cpp
	Adadelta.cpp
	AdadeltaRule.cpp
	Adagrad.cpp
	AdagradRule.cpp
	ADAM.cpp
	AdaMax.cpp
	AdaMaxRule.cpp
	ADAMRule.cpp
	AMSGrad.cpp
	AMSGradRule.cpp
	AnnealingScheduler.cpp
	AutoDifferentiator.cpp
	BackProp.cpp
	BackPropRule.cpp
	BaseLayer.cpp
	BinaryActivation.cpp
	ConvLayer.cpp
	ConvOperator.cpp
	CoreLayer.cpp
	CrossEntropyCost.cpp
	Encoder.cpp
	ExponentialActivation.cpp
	ExponentialCost.cpp
	ExponentialDecay.cpp
	GaussianActivation.cpp
	GenKLDivergence.cpp
	Gradient.cpp
	GradientAccumulator.cpp
	GradientAlgorithm.cpp
	GRULayer.cpp
	HellingerDistance.cpp
	IActivationFunction.cpp
	IBatchModule.cpp
	IDGen.cpp
	ILearningRateModule.cpp
	IOUtils.cpp
	ItakuraSaitoDistance.cpp
	IUpdateRule.cpp
	KLDivergence.cpp
	LinearActivation.cpp
	Logger.cpp
	LSTMLayer.cpp
	Metrics.cpp
	Nadam.cpp
	NadamRule.cpp
	NaturalGradient.cpp
	NetworkGradient.cpp
	NeuralNetwork.cpp
	NeuronOperator.cpp
	OpenMPBatchModule.cpp
	Param.cpp
	ParamModel.cpp
	ParamModelStorage.cpp
	PoolingLayer.cpp
	PowerSign.cpp
	PowerSignRule.cpp
	QuadraticCost.cpp
	RecurrentLayer.cpp
	ReluActivation.cpp
	RMSProp.cpp
	RMSPropRule.cpp
	RuleFactory.cpp
	SigmoidActivation.cpp
	SingleBatchModule.cpp
	SoftmaxActivation.cpp
	SoftplusActivation.cpp
	TanhActivation.cpp
	WarmStartup.cpp
	)

include_directories(
	${CLAB_DIR}
	)
	
add_library(CoeusCore STATIC ${SOURCE_FILES} ${INCLUDE_FILES})

